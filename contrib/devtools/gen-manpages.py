#!/usr/bin/env python3
# Copyright (c) 2022 The Bitcoin Core developers
# Distributed under the MIT software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.
import os
import subprocess
import sys
import tempfile

BINARIES = [
'src/bitcoind',
'src/bitcoin-cli',
'src/bitcoin-tx',
'src/bitcoin-wallet',
'src/bitcoin-util',
'src/qt/bitcoin-qt',
]

# Paths to external utilities.
git = os.getenv('GIT', 'git')
help2man = os.getenv('HELP2MAN', 'help2man')

# If not otherwise specified, get top directory from git.
topdir = os.getenv('TOPDIR')
if not topdir:
    r = subprocess.run([git, 'rev-parse', '--show-toplevel'], stdout=subprocess.PIPE, check=True, text=True)
    topdir = r.stdout.rstrip()

# Get input and output directories.
builddir = os.getenv('BUILDDIR', topdir)
mandir = os.getenv('MANDIR', os.path.join(topdir, 'doc/man'))

# Verify that all the required binaries are usable, and extract copyright
# message in a first pass.
versions = []
for relpath in BINARIES:
    abspath = os.path.join(builddir, relpath)
    try:
        r = subprocess.run([abspath, "--version"], stdout=subprocess.PIPE, check=True, text=True)
    except IOError:
        print(f'{abspath} not found or not an executable', file=sys.stderr)
        sys.exit(1)
    # take first line (which must contain version)
    verstr = r.stdout.splitlines()[0]
    # last word of line is the actual version e.g. v22.99.0-5c6b3d5b3508
    verstr = verstr.split()[-1]
    assert verstr.startswith('v')
    # remaining lines are copyright
    copyright = r.stdout.split('\n')[1:]
    assert copyright[0].startswith('Copyright (C)')

    versions.append((abspath, verstr, copyright))

if any(verstr.endswith('-dirty') for (_, verstr, _) in versions):
    print("WARNING: Binaries were built from a dirty tree.")
    print('man pages generated from dirty binaries should NOT be committed.')
    print('To properly generate man pages, please commit your changes (or discard them), rebuild, then run this script again.')
    print()

bitcoind_files = """

[FILES]

.B Data directory

The data directory is the default location where the Bitcoin Core files are stored:
.RS
.TP
.B Linux
$HOME/.bitcoin/
.TP
.B macOS
$HOME/Library/Application Support/Bitcoin/
.TP
.B Windows
%APPDATA%\\\Bitcoin
.RE

.PP
.B Chain-specific data directory
.PP
All content of the data directory, except for the bitcoin.conf file, is chain-specific.
This means the actual data directory paths for non-mainnet cases differ:
.RS
.TP
.B Mainnet
*path_to_datadir*/
.TP
.B Testnet
*path_to_datadir*/testnet3
.TP
.B Signet
*path_to_datadir*/signet
.TP
.B Regtest
*path_to_datadir*/regtest
.RE

.PP
.B
.PP
.B Data directory layout
.RS
.TP
.B blocks/
Blocks directory; can be specified by \\fB\-blocksdir\\fP option (except for blocks/index/)
.TP
.B blocks/index/
LevelDB database for block index; \\fB\-blocksdir\\fP option does not affect this path
.TP
.B chainstate/
LevelDB database for blockchain state (a compact representation of all currently unspent transaction outputs (UTXOs) and metadata about the transactions they are from)
.TP
.B wallets/
Contains wallets; can be specified by \\fB\-walletdir\\fP option; if wallets/ subdirectory does not exist, wallets reside in the data directory
.TP
.B ./anchors.dat
Anchor IP address database, created on shutdown and deleted at startup.
Anchors are last known outgoing block-relay-only peers that are tried to reconnect to on startup)
.TP
.B ./banlist.json
Stores the addresses/subnets of banned nodes
.TP
.B ./bitcoin.conf
User-defined configuration settings for bitcoind or bitcoin-qt.
File is not written to by the software and must be created manually. Path can be specified by \\fB\-conf\\fP option
.TP
.B ./bitcoind.pid
Stores the process ID (PID) of bitcoind or bitcoin-qt while running; created at start and deleted on shutdown; can be specified by \\fB\-pid\\fP option
.TP
.B ./debug.log
Contains debug information and general logging generated by bitcoind or bitcoin-qt; can be specified by \\fP\-debuglogfile\\fP option
.TP
.B ./fee_estimates.dat
Stores statistics used to estimate minimum transaction fees required for confirmation
.TP
.B ./mempool.dat
Dump of the mempool's transactions
.TP
.B ./onion_v3_private_key
Cached Tor onion service private key for \\fB\-listenonion\\fP option
.TP
.B ./i2p_private_key
Private key that corresponds to our I2P address. When \\fB\-i2psam=\\fP is specified the contents of this file is used to identify ourselves for making outgoing connections to I2P peers and possibly accepting incoming ones.
Automatically generated if it does not exist.
.TP
.B ./peers.dat
Peer IP address database (custom format)
.TP
.B ./settings.json
Read-write settings set through GUI or RPC interfaces, augmenting manual settings from bitcoin.conf.
File is created automatically if read-write settings storage is not disabled with \\fB\-nosettings\\fP option. Path can be specified with \\fB\-settings\\fP option.
.TP
.B ./.cookie
Session RPC authentication cookie
.RE

.PP
.B
.PP
.B Berkeley DB database based wallets
.RS
.TP
.B database/
BDB logging files. Part of BDB environment; created at start and deleted on shutdown; a user *must keep it as safe* as personal wallet wallet.dat
.TP
.B ./db.log
BDB error file
.TP
.B ./wallet.dat
Personal wallet (a BDB database) with keys and transactions
.TP
.B ./walletlock
BDB wallet lock file
.RE

.PP
.B
.PP
.B SQLite database based wallets
.RS
.TP
.B ./wallet.dat
Personal wallet (a SQLite database) with keys and transactions
.TP
.B ./wallet.dat-journal
SQLite Rollback Journal file for wallet.dat. Usually created at start and deleted on shutdown. A user *must keep it as safe* as the wallet.dat file.
.RE

.PP
.B
.PP
.B GUI settings

bitcoin-qt uses QSettings, this implies platform-specific locations where application settings are stored.
Check https://doc.qt.io/qt-5/qsettings.html#locations-where-application-settings-are-stored

"""

with tempfile.NamedTemporaryFile('w', suffix='.h2m') as footer:
    # Create copyright footer, and write it to a temporary include file.
    # Copyright is the same for all binaries, so just use the first.
    footer.write('[COPYRIGHT]\n')
    footer.write('\n'.join(versions[0][2]).strip())
    footer.write('\n')
    footer.flush()

    # Call the binaries through help2man to produce a manual page for each of them.
    for (abspath, verstr, _) in versions:
        outname = os.path.join(mandir, os.path.basename(abspath) + '.1')
        print(f'Generating {outname}â€¦')

        # Add other binaries to [SEE ALSO] section
        see_also_content = '[SEE ALSO]\n'
        for (other_abspath, _, _) in versions:
            if other_abspath != abspath:
                binary_name = os.path.basename(other_abspath)
                man_page_section = "1"
                see_also_content += f'{binary_name}({man_page_section}),\n'

        with tempfile.NamedTemporaryFile('w', suffix='.h2m') as see_also_file:
            see_also_file.write(see_also_content.rstrip(',\n'))
            see_also_file.flush()

            if "bitcoind" in os.path.basename(abspath):
                print("made it")
                with tempfile.NamedTemporaryFile('w', suffix='.h2m') as files_section:
                    files_section.write(bitcoind_files)
                    files_section.flush()
                    subprocess.run([help2man, '-N', '--version-string=' + verstr, '--include=' + footer.name, '--include=' + see_also_file.name, '--include=' + files_section.name, '-o', outname, abspath], check=True)
            else:
                subprocess.run([help2man, '-N', '--version-string=' + verstr, '--include=' + footer.name, '--include=' + see_also_file.name, '-o', outname, abspath], check=True)
